import { isAddress } from 'ethers';
import { InputError } from '../lib/errors/service.errors.js';
import { FunctionArgs } from '../services/agent/agent.interfaces.js';

/**
 * Masks a private key, showing only the first and last 4 characters.
 *
 * @param {string} privateKey - The private key to be masked.
 * @returns - The masked private key.
 */
export function maskPrivateKey(privateKey: string): string {
  return `${privateKey.slice(0, 4)}...${privateKey.slice(-4)}`;
}

/**
 * Masks a mnemonic phrase, showing only the first and last two words.
 *
 * @param {string} mnemonic - The mnemonic phrase to be masked.
 * @returns - The masked mnemonic phrase.
 */
export function maskMnemonic(mnemonic: string): string {
  const words = mnemonic.split(' ');
  return `${words.slice(0, 2).join(' ')} ... ${words.slice(-2).join(' ')}`;
}

/**
 * Validates the function arguments generated by the AI agent
 *
 * @param {FunctionArgs} functionArgs - The function arguments to validate.
 * @throws {InputError} If the contract address/ wallet address/ transaction hash/ block tag is invalid.
 */
export function validateFunctionArgs(functionArgs: FunctionArgs) {
  if (functionArgs.address) {
    if (!isAddress(functionArgs.address)) {
      throw new InputError(`Address '${functionArgs.address}' is not a valid address.`);
    }

    functionArgs.address = checkAndAdd0xPrefix(functionArgs.address);
  }

  if (functionArgs.txHash && !validateTxHash(functionArgs.txHash)) {
    throw new InputError(`'${functionArgs.txHash}' is not a valid transaction hash`);
  }
}

/**
 * Validates the transaction hash according to -
 * https://ethereum.stackexchange.com/questions/34285/what-is-the-regex-to-validate-an-ethereum-transaction-hash/34286#34286
 *
 *
 * @param {string} txHash - The transaction hash to validate.
 * @returns {boolean} - True if the transaction hash is valid, false otherwise.
 */
export function validateTxHash(txHash: string): boolean {
  return /^0x([A-Fa-f0-9]{64})$/.test(txHash);
}

/**
 * Checks if the address has a 0x prefix and adds it if it doesn't have one.
 *
 * @param {string} address - The address to check and add the 0x prefix to.
 * @returns {string} - The address with the 0x prefix.
 */
export function checkAndAdd0xPrefix(address: string): string {
  // Add a 0x prefix to the address if it doesn't have one
  const Saddress = String(address);
  if (!address.startsWith('0x')) {
    return '0x' + Saddress;
  }
  return address;
}
